---
swagger: "2.0"
info:
  description: This is an API for a restaurant
  version: 1.0.0
  title: Delilah Resto
  contact:
    email: romanluporini@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
host: virtserver.swaggerhub.com
basePath: /romanluporini/delilah_resto/1.0.0
tags:
  - name: admins
    description: Secured Admin-only calls
  - name: developers
    description: Operations available to regular developers
schemes:
  - https
paths:
  /log-in:
    get:
      tags:
        - User Login
      summary: authentication
      description: |
        visiting this endpoint you can authenticate yourself to access the services
      operationId: visitLogin
      produces:
        - application/json
      parameters: []
      responses:
        "200":
          description: login page visited succesfully
        "400":
          description: bad request
    post:
      tags:
        - User Authentication
      summary: authenticates users
      description: authenticates the user against the database
      operationId: authentication
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: userLog
          description: user for authentication
          required: false
          schema:
            $ref: "#/definitions/UserLogIn"
      responses:
        "201":
          description: user logged in
        "400":
          description: something went wrong, please insert your user name and password
        "409":
          description: user does not exists
  /sign-up:
    get:
      tags:
        - User Sign Up
      summary: register an account
      description: |
        visiting this endpoint you can register an account
      operationId: visitSignUp
      produces:
        - application/json
      parameters: []
      responses:
        "200":
          description: sign up page visited succesfully
        "400":
          description: bad request
    post:
      tags:
        - User Registration
      summary: registration
      description: registers the user in the database
      operationId: signingUp
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: userRegister
          description: user for registration
          required: false
          schema:
            $ref: "#/definitions/UserSignUp"
      responses:
        "201":
          description: user signed up
        "400":
          description: something went wrong, please retry
        "409":
          description: user is already registered
  /menu:
    get:
      tags:
        - Menu Explorer
      summary: see all menu items
      description: |
        visiting this endpoint you can see all the menu items available
      operationId: visitMenuExplorer
      produces:
        - application/json
      parameters: []
      responses:
        "200":
          description: menu explorer visited succesfully
        "400":
          description: bad request
    post:
      tags:
        - Add items
      summary: Add items to the menu
      description: Adds an item to the menu
      operationId: addItem
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: userLog
          description: user for authentication
          required: false
          schema:
            $ref: "#/definitions/UserLogIn"
      responses:
        "201":
          description: user logged in
        "400":
          description: something went wrong, please insert your user name and password
        "409":
          description: user does not exists
  /menu/:id:
    get:
    put:
    delete:
  /orders:
    get:
      tags:
        - Users Orders
      summary: see all incoming orders
      description: |
        visiting this endpoint you see user's orders
      operationId: visitOrders
      produces:
        - application/json
      parameters: []
      responses:
        "200":
          description: orders page visited succesfully
        "400":
          description: bad request
  /orders/:userId:
    get:
    post:
  /orders/:userId/:orderId:
    get:
    put:
    delete:
  /orders/confirmation/:userId/:orderId:
    get:
      tags:
        - User Order Confirmation
      summary: order confirmation
      description: |
        visiting this endpoint you can check if the order have been registered
      operationId: visitOrderConfirmation
      produces:
        - application/json
      parameters: []
      responses:
        "200":
          description: items ordered succesfully
        "400":
          description: bad request
  /orders/tracking/:userId/:orderId:
    get:
      tags:
        - User Order Tracking
      summary: order tracking
      description: |
        visiting this endpoint you can keep track of the order
      operationId: visitOrderTracking
      produces:
        - application/json
      parameters: []
      responses:
        "200":
          description: tracking page visited succesfully
        "400":
          description: bad request

definitions:
  UserLogIn:
    type: object
    required:
      - name
      - password
      - user
    properties:
      user:
        type: string
        format: uuid
        example: user_name
      name:
        type: string
        example: john
      password:
        type: string
        format: password
        example: password
  UserSignUp:
    type: object
    required:
      - address
      - email
      - full name
      - password
      - phone
      - user name
    properties:
      user name:
        type: string
        format: uuid
        example: user_name
      full name:
        type: string
        example: john doe
      email:
        type: string
        format: uuid
        example: example@example.com
      phone:
        type: number
        example: 1.14567891E9
      address:
        type: string
        example: street 1 123
      password:
        type: string
        format: password
        example: password
  UserCart:
    type: object
    required:
      - address
      - products id
      - total
    properties:
      products id:
        type: object
        example:
          product id1: 1
          product id2: 2
        properties: {}
      total:
        type: number
        example: 100.0
      address:
        type: string
        example: street 1 123
  UserOrderState:
    type: object
    required:
      - state
    properties:
      state:
        type: string
        format: uuid
        example: confirmed
